[{"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/App.tsx":"1","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/Home.tsx":"2","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/CreateGame.tsx":"3","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/JoinGame.tsx":"4","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/reducers/test.ts":"5","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/index.tsx":"6","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/actions/userActions.ts":"7","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/components/MenuButton.tsx":"8","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/store.ts":"9","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/actions/gameActions.ts":"10","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/reducers/game.ts":"11","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/reducers/index.ts":"12","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/components/GameScore.tsx":"13","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/Game.tsx":"14","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/GameFuncs.tsx":"15","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/GameCell.tsx":"16","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/HintCell.tsx":"17","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/Scoreboard.tsx":"18","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/GameGrid.tsx":"19","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/InputCell.tsx":"20"},{"size":1479,"mtime":1613304098422,"results":"21","hashOfConfig":"22"},{"size":537,"mtime":1612646162314,"results":"23","hashOfConfig":"22"},{"size":783,"mtime":1612646047250,"results":"24","hashOfConfig":"22"},{"size":972,"mtime":1613269697209,"results":"25","hashOfConfig":"22"},{"size":587,"mtime":1611706349331,"results":"26","hashOfConfig":"22"},{"size":729,"mtime":1611850866175,"results":"27","hashOfConfig":"22"},{"size":661,"mtime":1612936532815,"results":"28","hashOfConfig":"22"},{"size":553,"mtime":1611848052784,"results":"29","hashOfConfig":"22"},{"size":230,"mtime":1611705375863,"results":"30","hashOfConfig":"22"},{"size":470,"mtime":1612993891230,"results":"31","hashOfConfig":"22"},{"size":898,"mtime":1613019201895,"results":"32","hashOfConfig":"22"},{"size":145,"mtime":1611849850745,"results":"33","hashOfConfig":"22"},{"size":348,"mtime":1612046908170,"results":"34","hashOfConfig":"22"},{"size":4175,"mtime":1613372859384,"results":"35","hashOfConfig":"22"},{"size":4464,"mtime":1613028635943,"results":"36","hashOfConfig":"22"},{"size":1215,"mtime":1612912717606,"results":"37","hashOfConfig":"22"},{"size":689,"mtime":1612902614610,"results":"38","hashOfConfig":"22"},{"size":1638,"mtime":1613263184447,"results":"39","hashOfConfig":"22"},{"size":1428,"mtime":1613304586690,"results":"40","hashOfConfig":"22"},{"size":1288,"mtime":1613304508670,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"b0p7e",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/App.tsx",["90","91"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/Home.tsx",[],["92","93"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/CreateGame.tsx",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/JoinGame.tsx",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/reducers/test.ts",["94"],"import socketIOClient, { Socket } from 'socket.io-client';\n\ninterface Action {\n  type: string,\n  payload: any\n}\n\ntype IS = {\n  string: string\n  conn: typeof Socket\n}\n\nconst initialState: IS = {\n  string: '',\n  conn: socketIOClient('http://localhost:3002', {transports: ['websocket']})\n}\n\nconst reducer = (state = initialState, action: Action) => {\n  switch(action.type) {\n    \n    case('TEST'): {\n      const {string} = action.payload;\n\n      return {\n        ...state,\n        string: string\n      }\n    };\n\n    default: {\n      return {...state}\n    };\n\n  };\n}\n\nexport default reducer;",["95","96"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/index.tsx",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/actions/userActions.ts",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/components/MenuButton.tsx",[],["97","98"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/store.ts",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/actions/gameActions.ts",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/reducers/game.ts",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/reducers/index.ts",[],["99","100"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/components/GameScore.tsx",[],["101","102"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/Game.tsx",["103","104"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/GameFuncs.tsx",["105"],"type getIndexes = (i: number, n: number) => number[]\n\nconst funcs = {\n  initGrid: (ta: Turn[], n: number) => {\n    // console.clear();\n    console.time('init');\n    let N = n*n;\n    let values = new Array(N*N).fill(0);\n    let players = new Array(N*N).fill(0);\n\n    /**************************\n    The order here is important\n    ***************************/\n    for(let i=0; i<ta.length; i++){\n      let turn = ta[i]\n      // First add the turn to the array\n      values[turn.index] = turn.value;\n      players[turn.index] = turn.player;\n\n      // Then get auto completes\n      let autos = funcs.autoComplete(turn.index, values, 3);\n      console.log(autos);\n      if(autos){\n        for(let a of autos){\n          if(a.value !== 0){\n            values[a.index] = a.value;\n            players[a.index] = turn.player;\n          }\n        }\n      }\n\n    }\n\n    console.timeEnd('init');\n    return {values, players}\n  },\n  \n  getRow: (index: number, n: number) => {\n    let N = n*n;\n    let ri = Math.floor(index / N) * N;\n    let rowIndexes: number[] = Array.from( Array(N).keys() ).map( (e: number) => {\n      return ri+e;\n    });\n  \n    return rowIndexes;\n  },\n  \n  getCol: (index: number, n: number) => {\n    let N = n*n;\n    let ci = index % N;\n    \n    let colIndexes: number[] = Array.from( Array(N).keys() ).map ( (e: number) => {\n      return ci + (N*e);\n    })\n  \n    return colIndexes;\n  },\n  \n  getBox: (index: number, n: number) => {\n    let N = n*n;\n    let rstart = Math.floor( index / (N * n));\n    let cstart = Math.floor( (index % N) / n);\n    let start = (rstart * N * n) + (cstart * n);\n    // console.log(start);\n  \n    let boxIndexes: number[] = [];\n\n    for(let ri=0; ri<n; ri++){\n      for(let ci=0; ci<n; ci++){\n        boxIndexes.push( (start + ci) + (ri * N) )\n      }\n    }\n\n    return boxIndexes;\n  },\n\n  getGroupSet: (index: number, arr: number[], n: number) => {\n    // console.time('getGroupSet');\n\n    let indexes = funcs.getBox(index, n)\n      .concat(funcs.getCol(index, n))\n      .concat(funcs.getRow(index, n));\n    let all = indexes.map( (e: number) => {\n      return arr[e]\n    })\n\n    let set = new Set(all);\n\n    // console.timeEnd('getGroupSet');\n    return set\n  },\n\n  testInput: (index: number, arr: number[], n: number, value: number) => {\n    let set = funcs.getGroupSet(index, arr, n);\n\n    if(set.has(value)){\n      let indexes = Array.from(\n        new Set( [\n          funcs.getRow(index, n),\n          funcs.getCol(index, n),\n          funcs.getBox(index, n)\n        ].flat() )\n      );\n\n      return indexes.filter( (e: number) => (arr[e] === value) )\n    }\n    else {\n      return true;\n    }\n  },\n\n  // Make this recursive\n  // Computer with \"primary\" digits instead of binary digits\n  // 0000 = 0, 0110 = 5*3 0110 = 4+2\n  autoComplete: (index: number, arr: number[], n: number, autoArr: AutoComplete[] = []): any => {\n    \n    let indexes = new Set( [\n      funcs.getRow(index, n),\n      funcs.getCol(index, n),\n      funcs.getBox(index, n)\n    ].flat() )\n\n    let found = Array.from(indexes).map( (e: any) => {\n      return {\n        set: funcs.getGroupSet(e, arr, n),\n        index: e\n      };\n    }).filter( (e) => e.set.size === n*n && arr[e.index] === 0);\n    console.log(found);\n\n    if(found.length > 0){\n\n      let newArr = [...arr];\n\n      let autos = found.map( (e) => {\n        e.set.delete(0);\n        let setArr = Array.from(e.set);\n        let boolArr = Array(n*n).fill(false);\n\n        for(let i=0; i<setArr.length; i++){\n          boolArr[ setArr[i]-1 ] = true;\n        }\n\n        let auto = {\n          index: e.index,\n          value: boolArr.findIndex( (b: boolean) => (!b) ) + 1\n        }\n\n        newArr[auto.index] = auto.value;\n        found.forEach( e => e.set.add(auto.value) )\n\n        return auto;\n      })\n\n      console.log(autos);\n      let bigChungus = autos.map( (e) => {\n        return funcs.autoComplete(e.index, newArr, n, [...autoArr, e]);\n      });\n      let bigSet = new Set(autos.concat(bigChungus).flat())\n      return Array.from(bigSet);\n    } else {\n      return autoArr;\n    }\n\n  }\n} \n\n\nexport default funcs;\n/*     0        1        2\n0  00 01 02 03 04 05 06 07 08\n1  09 10 11 12 13 14 15 16 17 \n2  18 19 20 21 22 23 24 25 26 \n-      3        4        5\n3  27 28 29 30 31 32 33 34 35 \n4  36 37 38 39 40 41 42 43 44\n5  45 46 47 48 49 50 51 52 53 \n-      6        7        9\n6  54 55 56 57 58 59 60 61 62 \n7  63 64 65 66 67 68 69 70 71 \n8  72 73 74 75 76 77 78 79 80\n*/",["106","107"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/GameCell.tsx",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/HintCell.tsx",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/Scoreboard.tsx",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/GameGrid.tsx",["108"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game2/InputCell.tsx",["109"],{"ruleId":"110","severity":1,"message":"111","line":16,"column":8,"nodeType":"112","messageId":"113","endLine":16,"endColumn":12},{"ruleId":"114","severity":1,"message":"115","line":43,"column":6,"nodeType":"116","endLine":43,"endColumn":15,"suggestions":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":30,"column":14,"nodeType":"124","messageId":"125","endLine":32,"endColumn":6},{"ruleId":"118","replacedBy":"126"},{"ruleId":"120","replacedBy":"127"},{"ruleId":"118","replacedBy":"128"},{"ruleId":"120","replacedBy":"129"},{"ruleId":"118","replacedBy":"130"},{"ruleId":"120","replacedBy":"131"},{"ruleId":"118","replacedBy":"132"},{"ruleId":"120","replacedBy":"133"},{"ruleId":"114","severity":1,"message":"134","line":71,"column":6,"nodeType":"116","endLine":71,"endColumn":24,"suggestions":"135"},{"ruleId":"110","severity":1,"message":"136","line":87,"column":62,"nodeType":"112","messageId":"113","endLine":87,"endColumn":66},{"ruleId":"110","severity":1,"message":"137","line":1,"column":6,"nodeType":"112","messageId":"113","endLine":1,"endColumn":16},{"ruleId":"118","replacedBy":"138"},{"ruleId":"120","replacedBy":"139"},{"ruleId":"110","severity":1,"message":"140","line":1,"column":16,"nodeType":"112","messageId":"113","endLine":1,"endColumn":22},{"ruleId":"114","severity":1,"message":"141","line":36,"column":6,"nodeType":"116","endLine":36,"endColumn":13,"suggestions":"142"},"@typescript-eslint/no-unused-vars","'Game' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'P.conn' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["143"],"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",["144"],["145"],["144"],["145"],["144"],["145"],["144"],["145"],"React Hook useEffect has missing dependencies: 'P', 'gameState.values', 'hasJoined', and 'n'. Either include them or remove the dependency array.",["146"],"'plyr' is assigned a value but never used.","'getIndexes' is defined but never used.",["144"],["145"],"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'test'. Either include it or remove the dependency array.",["147"],{"desc":"148","fix":"149"},"no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},"Update the dependencies array to be: [P.board, P.conn, history]",{"range":"154","text":"155"},"Update the dependencies array to be: [P, P.board, gameState.values, hasJoined, hasQuit, n]",{"range":"156","text":"157"},"Update the dependencies array to be: [test, value]",{"range":"158","text":"159"},[888,897],"[P.board, P.conn, history]",[1790,1808],"[P, P.board, gameState.values, hasJoined, hasQuit, n]",[819,826],"[test, value]"]