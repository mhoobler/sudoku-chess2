[{"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/App.tsx":"1","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/Home.tsx":"2","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/CreateGame.tsx":"3","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/JoinGame.tsx":"4","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/index.tsx":"5","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/actions/userActions.ts":"6","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/components/MenuButton.tsx":"7","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/store.ts":"8","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/actions/gameActions.ts":"9","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/reducers/game.ts":"10","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/reducers/index.ts":"11","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game/Scoreboard.tsx":"12","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/reducers/user.ts":"13","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game/Game.tsx":"14","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game/GameFuncs.tsx":"15","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game/GameGrid.tsx":"16","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game/Scorecard.tsx":"17","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game/InputCell.tsx":"18"},{"size":1332,"mtime":1613472570102,"results":"19","hashOfConfig":"20"},{"size":473,"mtime":1613475055658,"results":"21","hashOfConfig":"20"},{"size":783,"mtime":1612646047250,"results":"22","hashOfConfig":"20"},{"size":972,"mtime":1613447038337,"results":"23","hashOfConfig":"20"},{"size":729,"mtime":1611850866175,"results":"24","hashOfConfig":"20"},{"size":667,"mtime":1613447106616,"results":"25","hashOfConfig":"20"},{"size":552,"mtime":1613473597486,"results":"26","hashOfConfig":"20"},{"size":230,"mtime":1611705375863,"results":"27","hashOfConfig":"20"},{"size":470,"mtime":1612993891230,"results":"28","hashOfConfig":"20"},{"size":898,"mtime":1613019201895,"results":"29","hashOfConfig":"20"},{"size":145,"mtime":1613447072770,"results":"30","hashOfConfig":"20"},{"size":2161,"mtime":1613459371266,"results":"31","hashOfConfig":"20"},{"size":587,"mtime":1613447047999,"results":"32","hashOfConfig":"20"},{"size":4587,"mtime":1613472938055,"results":"33","hashOfConfig":"20"},{"size":5300,"mtime":1613473693967,"results":"34","hashOfConfig":"20"},{"size":2315,"mtime":1613472826904,"results":"35","hashOfConfig":"20"},{"size":470,"mtime":1613459343816,"results":"36","hashOfConfig":"20"},{"size":1607,"mtime":1613472635226,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"b0p7e",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/App.tsx",["77","78"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/Home.tsx",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/CreateGame.tsx",[],["79","80"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/JoinGame.tsx",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/index.tsx",[],["81","82"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/actions/userActions.ts",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/pages/components/MenuButton.tsx",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/store.ts",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/actions/gameActions.ts",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/reducers/game.ts",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/reducers/index.ts",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game/Scoreboard.tsx",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/redux/reducers/user.ts",["83"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game/Game.tsx",["84"],"import React, {useEffect, useState} from 'react';\nimport { connect } from 'react-redux';\nimport { Socket } from 'socket.io-client';\n\nimport GameGrid from './GameGrid';\nimport ScoreBord from './Scoreboard';\n\nimport { setTurnArr } from '../redux/actions/gameActions';\n\nimport GameFuncs from './GameFuncs';\n\nimport './styles/Game.css';\n\ntype GameState = {\n  values: number[]\n  players: number[]\n}\n\ntype Props = {\n  conn: typeof Socket\n  board: Board\n  focus: number\n  hintStyle: 'default' | 'inverse'\n  isPlayer: 1 | 2\n  setTurnArr: (ta: Turn[]) => void\n}\n\nconst Game: React.FC<Props> = (P) => {\n  \n  // This n value is very important, \n  // helps determine things like the size of grid and grid coordinates\n  const n = Math.sqrt(Math.sqrt(P.board.size));\n\n  // These two arrays help render the GameGrid and keep score\n  const [gameState, setGameState] = useState<GameState>(\n    { \n      values: Array(P.board.size).fill(0),\n      players: Array(P.board.size).fill(0)\n    }\n  );\n\n  // States to store errors and to help with listeners\n  const [errors, setErrors] = useState<GameErrors>({types: [], cells: []});\n  const [hasJoined, setHasJoined] = useState(P.isPlayer === 2 ? true : false);\n  const [hasQuit, setHasQuit] = useState(false);\n  // Determine player turn\n  const turnArr = P.board.turnArr, len = turnArr.length; \n  const isTurn = len > 0 ? (turnArr[len - 1].player === 1 ? 2 : 1) : 1;\n\n  useEffect( () => {\n    P.conn.off('PLAYER_JOIN');\n    if(!hasJoined){\n      P.conn.on('PLAYER_JOIN', (message: any) => {\n        setHasJoined(true);\n      })\n    }\n\n    P.conn.off('USER_QUIT');\n    P.conn.on('USER_QUIT', () => {\n      setHasQuit(true);\n    })\n\n    const newGrid = GameFuncs.initGrid(P.board.turnArr, n);\n    if(newGrid.values !== gameState.values){\n      setGameState(newGrid);\n\n      // Both other player and this player will update their boards from this listener\n      P.conn.off('UPDATE_TURN');\n      P.conn.on('UPDATE_TURN', (message: any) => {\n        let ta = message.turnArr;\n    \n        P.setTurnArr(ta);\n      })\n    }\n  }, [P.board, hasQuit] );\n\n  // BUG Somehow a value of \"151\" will turn into \"15\" and become a potentially valid\n  // This gets called inside InputCell\n  const handleTurn = (index: number, value: number) => {\n    console.log(isTurn);\n\n    //initialize variables\n    // const turnArr = P.board.turnArr, len = turnArr.length; \n    const testInput = GameFuncs.testInput(index, gameState.values, n, value);\n    const canTurn = P.isPlayer === isTurn;\n    let newErrors: GameErrors = {types: [], cells: []};\n\n    //Make sure input is valid\n    if(testInput === true && canTurn && value > 0 && value <= n*n){\n      const newTurn: Turn = {\n        gameID: P.board._id,\n        player: P.isPlayer,\n        index: index,\n        value: value\n      }\n      \n      //Send new turn\n      P.conn.emit('ADD_TURN', newTurn);\n    }\n\n    // Handle Errors\n    if(typeof testInput !== 'boolean' && value !== 0) {\n      newErrors = {\n        types: [...newErrors.types, 'BAD_INPUT'],\n        cells: testInput\n      }\n    }\n    if(!canTurn) {\n      newErrors.types.push('NOT_TURN')\n    }\n    if(value < 1){\n      newErrors.types.push('ZERO_NUM')\n    }\n    if(value > n*n){\n      newErrors.types.push('BIG_NUM')\n    }\n    setErrors(newErrors);\n\n    // This was trying to fix something in InputCell\n    // if(newErrors.types.length > 0) {\n    //   return false;\n    // } else {\n    //   return true;\n    // }\n  }\n\n  return (\n    <div className='game-container'>\n      {\n      hasQuit ?\n        <div className='pre-game'>\n          <h4> Uh oh, it looks like the other player quit the game! </h4>\n          <h4> Currently there is no way for someone to rejoin a game, sorry :(</h4>\n        </div>\n      :\n      hasJoined ? \n        <React.Fragment>\n          <ScoreBord\n          players={gameState.players}\n          errors={errors} isTurn={isTurn}\n          isPlayer={P.isPlayer}\n          />\n          <GameGrid \n          errors={errors.cells}\n          players={gameState.players}\n          values={gameState.values}\n          handleTurn={handleTurn}\n          />\n    \n          <div className='game-sidebar-right'>&nbsp;</div>\n        </React.Fragment>\n      :\n        <div className='pre-game'>\n          <h4>Waiting for player to join you</h4>\n          <h4>You're Game ID is: {P.board._id} </h4>\n        </div>\n      }\n      </div>\n\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    focus: state.game.focus,\n    hintStyle: state.game.hintStyle,\n    isPlayer: state.game.isPlayer\n  }\n}\n\nexport default connect(mapStateToProps, {setTurnArr})(Game);","/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game/GameFuncs.tsx",["85"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game/GameGrid.tsx",["86"],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game/Scorecard.tsx",[],"/home/michael/Dev/HOMEWORK/sudoku-chess2/client/src/Game/InputCell.tsx",["87"],{"ruleId":"88","severity":1,"message":"89","line":16,"column":8,"nodeType":"90","messageId":"91","endLine":16,"endColumn":12},{"ruleId":"92","severity":1,"message":"93","line":36,"column":6,"nodeType":"94","endLine":36,"endColumn":15,"suggestions":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"96","replacedBy":"100"},{"ruleId":"98","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":30,"column":14,"nodeType":"104","messageId":"105","endLine":32,"endColumn":6},{"ruleId":"92","severity":1,"message":"106","line":75,"column":6,"nodeType":"94","endLine":75,"endColumn":24,"suggestions":"107"},{"ruleId":"88","severity":1,"message":"108","line":1,"column":6,"nodeType":"90","messageId":"91","endLine":1,"endColumn":16},{"ruleId":"88","severity":1,"message":"109","line":1,"column":16,"nodeType":"90","messageId":"91","endLine":1,"endColumn":22},{"ruleId":"92","severity":1,"message":"110","line":40,"column":6,"nodeType":"94","endLine":40,"endColumn":13,"suggestions":"111"},"@typescript-eslint/no-unused-vars","'Game' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["112"],"no-native-reassign",["113"],"no-negated-in-lhs",["114"],["113"],["114"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","React Hook useEffect has missing dependencies: 'P', 'gameState.values', 'hasJoined', and 'n'. Either include them or remove the dependency array.",["115"],"'getIndexes' is defined but never used.","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'test'. Either include it or remove the dependency array.",["116"],{"desc":"117","fix":"118"},"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [P.board, history]",{"range":"123","text":"124"},"Update the dependencies array to be: [P, P.board, gameState.values, hasJoined, hasQuit, n]",{"range":"125","text":"126"},"Update the dependencies array to be: [test, value]",{"range":"127","text":"128"},[741,750],"[P.board, history]",[2049,2067],"[P, P.board, gameState.values, hasJoined, hasQuit, n]",[1121,1128],"[test, value]"]